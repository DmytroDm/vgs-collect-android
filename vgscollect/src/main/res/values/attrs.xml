<?xml version="1.0" encoding="utf-8"?>
<resources>
    <attr name="datePattern" format="string"/>
    <attr name="datePickerModes">
        <enum name="calendar" value="0" />
        <enum name="spinner" value="1" />
        <enum name="input" value="2" />
    </attr>


    <attr name="textSize" format="dimension"/>
    <attr name="hint" format="string"/>
    <attr name="enabled" format="boolean"/>
    <attr name="textColor" format="color"/>
    <attr name="text" format="string"  localization="suggested"/>

    <attr name="maxLines" format="integer"/>
    <attr name="minLines" format="integer"/>

    <attr name="fieldName" format="string"/>

    <attr name="cursorVisible" format="boolean" />
    <attr name="singleLine" format="boolean" />
    <attr name="isRequired" format="boolean" />

    <attr name="scrollHorizontally" format="boolean" />

    <attr name="inputType">
        <enum name="none" value="0" />
        <enum name="text" value="1" />
        <enum name="textPassword" value="129" />
        <enum name="number" value="2" />
        <enum name="numberPassword" value="18" />
        <enum name="date" value="4" />
    </attr>

    <attr name="ellipsize">
        <enum name="none" value="0" />
        <enum name="start" value="1" />
        <enum name="middle" value="2" />
        <enum name="end" value="3" />
        <enum name="marquee" value="4" />
    </attr>

    <attr name="gravity">
        <flag name="top" value="0x30" />
        <flag name="bottom" value="0x50" />
        <flag name="left" value="0x03" />
        <flag name="right" value="0x05" />
        <flag name="center_vertical" value="0x10" />
        <flag name="fill_vertical" value="0x70" />
        <flag name="center_horizontal" value="0x01" />
        <flag name="fill_horizontal" value="0x07" />
        <flag name="center" value="0x11" />
        <flag name="fill" value="0x77" />
        <flag name="clip_vertical" value="0x80" />
        <flag name="clip_horizontal" value="0x08" />
        <flag name="start" value="0x00800003" />
        <flag name="end" value="0x00800005" />
    </attr>

    <attr name="textStyle">
        <flag name="normal" value="0" />
        <flag name="bold" value="1" />
        <flag name="italic" value="2" />
    </attr>


    <attr name="imeOptions">
        <!-- There are no special semantics associated with this editor. -->
        <flag name="normal" value="0x00000000" />
        <!-- There is no specific action associated with this editor, let the
             editor come up with its own if it can.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_NULL}. -->
        <flag name="actionUnspecified" value="0x00000000" />
        <!-- This editor has no action associated with it.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}. -->
        <flag name="actionNone" value="0x00000001" />
        <!-- The action key performs a "go"
             operation to take the user to the target of the text they typed.
             Typically used, for example, when entering a URL.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}. -->
        <flag name="actionGo" value="0x00000002" />
        <!-- The action key performs a "search"
             operation, taking the user to the results of searching for the text
             the have typed (in whatever context is appropriate).
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}. -->
        <flag name="actionSearch" value="0x00000003" />
        <!-- The action key performs a "send"
             operation, delivering the text to its target.  This is typically used
             when composing a message.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}. -->
        <flag name="actionSend" value="0x00000004" />
        <!-- The action key performs a "next"
             operation, taking the user to the next field that will accept text.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}. -->
        <flag name="actionNext" value="0x00000005" />
        <!-- The action key performs a "done"
             operation, closing the soft input method.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}. -->
        <flag name="actionDone" value="0x00000006" />
        <!-- The action key performs a "previous"
             operation, taking the user to the previous field that will accept text.
             Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}. -->
        <flag name="actionPrevious" value="0x00000007" />
        <!-- Used to request that the IME should not update any personalized data such as typing
             history and personalized language model based on what the user typed on this text
             editing object. Typical use cases are:
             <ul>
                 <li>When the application is in a special mode, where user's activities are expected
                 to be not recorded in the application's history. Some web browsers and chat
                 applications may have this kind of modes.</li>
                 <li>When storing typing history does not make much sense.  Specifying this flag in
                 typing games may help to avoid typing history from being filled up with words that
                 the user is less likely to type in their daily life.  Another example is that when
                 the application already knows that the expected input is not a valid word (e.g. a
                 promotion code that is not a valid word in any natural language).</li>
             </ul>
             <p>Applications need to be aware that the flag is not a guarantee, and some IMEs may
             not respect it.</p> -->
        <flag name="flagNoPersonalizedLearning" value="0x1000000" />
        <!-- Used to request that the IME never go
             into fullscreen mode.  Applications need to be aware that the flag is not
             a guarantee, and not all IMEs will respect it.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}. -->
        <flag name="flagNoFullscreen" value="0x2000000" />
        <!-- Like flagNavigateNext, but
             specifies there is something interesting that a backward navigation
             can focus on.  If the user selects the IME's facility to backward
             navigate, this will show up in the application as an actionPrevious
             at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
             InputConnection.performEditorAction(int)}.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_PREVIOUS}. -->
        <flag name="flagNavigatePrevious" value="0x4000000" />
        <!-- Used to specify that there is something
             interesting that a forward navigation can focus on. This is like using
             actionNext, except allows the IME to be multiline (with
             an enter key) as well as provide forward navigation.  Note that some
             IMEs may not be able to do this, especially when running on a small
             screen where there is little space.  In that case it does not need to
             present a UI for this option.  Like actionNext, if the
             user selects the IME's facility to forward navigate, this will show up
             in the application at
             {@link android.view.inputmethod.InputConnection#performEditorAction(int)
             InputConnection.performEditorAction(int)}.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}. -->
        <flag name="flagNavigateNext" value="0x8000000" />
        <!-- Used to specify that the IME does not need
             to show its extracted text UI.  For input methods that may be fullscreen,
             often when in landscape mode, this allows them to be smaller and let part
             of the application be shown behind.  Though there will likely be limited
             access to the application available from the user, it can make the
             experience of a (mostly) fullscreen IME less jarring.  Note that when
             this flag is specified the IME may <em>not</em> be set up to be able
             to display text, so it should only be used in situations where this is
             not needed.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}. -->
        <flag name="flagNoExtractUi" value="0x10000000" />
        <!-- Used in conjunction with a custom action, this indicates that the
             action should not be available as an accessory button when the
             input method is full-screen.
             Note that by setting this flag, there can be cases where the action
             is simply never available to the user.  Setting this generally means
             that you think showing text being edited is more important than the
             action you have supplied.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}. -->
        <flag name="flagNoAccessoryAction" value="0x20000000" />
        <!-- Used in conjunction with a custom action,
             this indicates that the action should not be available in-line as
             a replacement for the "enter" key.  Typically this is
             because the action has such a significant impact or is not recoverable
             enough that accidentally hitting it should be avoided, such as sending
             a message.    Note that {@link android.widget.TextView} will
             automatically set this flag for you on multi-line text views.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}. -->
        <flag name="flagNoEnterAction" value="0x40000000" />
        <!-- Used to request that the IME should be capable of inputting ASCII
             characters.  The intention of this flag is to ensure that the user
             can type Roman alphabet characters in a {@link android.widget.TextView}
             used for, typically, account ID or password input.  It is expected that IMEs
             normally are able to input ASCII even without being told so (such IMEs
             already respect this flag in a sense), but there could be some cases they
             aren't when, for instance, only non-ASCII input languages like Arabic,
             Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
             aware that the flag is not a guarantee, and not all IMEs will respect it.
             However, it is strongly recommended for IME authors to respect this flag
             especially when their IME could end up with a state that has only non-ASCII
             input languages enabled.
             <p>Corresponds to
             {@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}. -->
        <flag name="flagForceAscii" value="0x80000000" />
    </attr>


    <declare-styleable name="InputFieldView">
        <attr name="imeOptions" />
    </declare-styleable>





    <declare-styleable name="VGSEditText">
        <attr name="fieldName"/>

        <attr name="inputType"/>

        <attr name="text"/>
        <attr name="enabled"/>
        <attr name="textSize"/>
        <attr name="textColor" />
        <attr name="maxLines"/>
        <attr name="minLines"/>
        <attr name="ellipsize"/>

        <attr name="textStyle" />

        <attr name="cursorVisible" />
        <attr name="singleLine"  />
        <attr name="isRequired"/>

        <attr name="gravity" />
        <attr name="scrollHorizontally"/>

        <attr name="hint" />

        <attr name="fieldType" format="enum">
            <enum name="cardNumber" value="0"/>
            <enum name="cvc" value="1"/>
            <enum name="expDate" value="2"/>
            <enum name="cardHolderName" value="3"/>
            <enum name="info" value="4"/>
        </attr>
    </declare-styleable>

    <declare-styleable name="VGSCardNumberEditText">
        <attr name="fieldName"/>

        <attr name="inputType"/>

        <attr name="text"/>
        <attr name="enabled"/>
        <attr name="textSize"/>
        <attr name="textColor" />
        <attr name="maxLines"/>
        <attr name="minLines"/>
        <attr name="ellipsize"/>

        <attr name="textStyle" />

        <attr name="cursorVisible" />
        <attr name="singleLine"  />
        <attr name="isRequired"/>

        <attr name="gravity" />
        <attr name="scrollHorizontally"/>

        <attr name="hint" />


        <attr name="numberDivider" format="string"/>
        <attr name="cardBrandIconGravity">
            <enum name="none" value="0" />
            <enum name="start" value="8388611" />
            <enum name="end" value="8388613" />
        </attr>
    </declare-styleable>


    <declare-styleable name="DateTextField">
        <attr name="fieldName"/>

        <attr name="inputType"/>

        <attr name="text"/>
        <attr name="enabled"/>
        <attr name="textSize"/>
        <attr name="textColor" />
        <attr name="ellipsize"/>

        <attr name="textStyle" />

        <attr name="cursorVisible" />
        <attr name="singleLine"  />
        <attr name="isRequired"/>

        <attr name="gravity" />
        <attr name="scrollHorizontally"/>

        <attr name="hint" />


        <attr name="maxDate" format="string"/>
        <attr name="minDate" format="string"/>
        <attr name="datePattern"/>
        <attr name="datePickerModes"/>

    </declare-styleable>

    <declare-styleable name="ExpirationDateEditText">
        <attr name="fieldName"/>

        <attr name="inputType"/>

        <attr name="text"/>
        <attr name="enabled"/>
        <attr name="textSize"/>
        <attr name="textColor" />
        <attr name="ellipsize"/>

        <attr name="textStyle" />

        <attr name="cursorVisible" />
        <attr name="singleLine"  />
        <attr name="isRequired"/>

        <attr name="gravity" />
        <attr name="scrollHorizontally"/>

        <attr name="hint" />

        <attr name="datePattern"/>
        <attr name="datePickerModes"/>
    </declare-styleable>

    <declare-styleable name="VGSTextInputLayout">
        <attr name="hint" />
        <attr name="hintEnabled" format="boolean"/>
        <attr name="hintAnimationEnabled" format="boolean"/>

        <attr name="passwordToggleEnabled" format="boolean"/>
        <attr name="passwordToggleTint" format="color"/>
        <attr name="passwordToggleDrawable" format="reference"/>

        <attr name="boxBackgroundModes" >
            <enum name="outline" value="0"/>
            <enum name="filled" value="1"/>
            <enum name="none" value="2"/>
        </attr>
        <attr name="boxBackgroundColor" format="color"/>
        <attr name="boxStrokeColor" format="color"/>
        <attr name="boxCornerRadiusTopEnd" format="dimension"/>
        <attr name="boxCornerRadiusTopStart" format="dimension"/>
        <attr name="boxCornerRadiusBottomStart" format="dimension"/>
        <attr name="boxCornerRadiusBottomEnd" format="dimension"/>
        <attr name="boxCornerRadius" format="dimension"/>

        <attr name="counterEnabled" format="boolean"/>
        <attr name="counterMaxLength" format="integer"/>

        <attr name="startIconTint" format="color"/>
        <attr name="startIconDrawable" format="reference"/>

        <attr name="endIconTint" format="color"/>
        <attr name="endIconDrawable" format="reference"/>
        <attr name="endIconModes">
            <enum name="custom" value="-1"/>
            <enum name="none" value="0"/>
            <enum name="password_toggle" value="1"/>
            <enum name="clear_text" value="2"/>
        </attr>
    </declare-styleable>
</resources>